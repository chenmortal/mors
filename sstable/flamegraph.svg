<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="1258"><g><title>build-14da55837b9c1e2c`DYLD-STUB$$free (5 samples, 0.40%)</title><rect x="0.0000%" y="293" width="0.3975%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="303.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (5 samples, 0.40%)</title><rect x="0.7154%" y="277" width="0.3975%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="5"/><text x="0.9654%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.08%)</title><rect x="1.1129%" y="197" width="0.0795%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="1"/><text x="1.3629%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`once_cell::imp::initialize_or_wait (1 samples, 0.08%)</title><rect x="1.1129%" y="181" width="0.0795%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="1"/><text x="1.3629%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.08%)</title><rect x="1.1129%" y="165" width="0.0795%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="1"/><text x="1.3629%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`criterion_plot::version (1 samples, 0.08%)</title><rect x="1.1129%" y="149" width="0.0795%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="1"/><text x="1.3629%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`std::sys::pal::unix::process::process_common::Command::new (1 samples, 0.08%)</title><rect x="1.1129%" y="133" width="0.0795%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="1"/><text x="1.3629%" y="143.50"></text></g><g><title>build-14da55837b9c1e2c`serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="1.1924%" y="197" width="0.0795%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="1"/><text x="1.4424%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.1924%" y="181" width="0.0795%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="1"/><text x="1.4424%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (1 samples, 0.08%)</title><rect x="1.1924%" y="165" width="0.0795%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="1"/><text x="1.4424%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`std::sys::pal::unix::pipe::read2 (1 samples, 0.08%)</title><rect x="1.2719%" y="181" width="0.0795%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="1"/><text x="1.5219%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.08%)</title><rect x="1.2719%" y="165" width="0.0795%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="1"/><text x="1.5219%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;criterion::Criterion as core::default::Default&gt;::default (4 samples, 0.32%)</title><rect x="1.1129%" y="277" width="0.3180%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="4"/><text x="1.3629%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`once_cell::imp::OnceCell&lt;T&gt;::initialize (4 samples, 0.32%)</title><rect x="1.1129%" y="261" width="0.3180%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="4"/><text x="1.3629%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`once_cell::imp::initialize_or_wait (4 samples, 0.32%)</title><rect x="1.1129%" y="245" width="0.3180%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="4"/><text x="1.3629%" y="255.50"></text></g><g><title>build-14da55837b9c1e2c`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (4 samples, 0.32%)</title><rect x="1.1129%" y="229" width="0.3180%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="4"/><text x="1.3629%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`core::ops::function::FnOnce::call_once (4 samples, 0.32%)</title><rect x="1.1129%" y="213" width="0.3180%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="4"/><text x="1.3629%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`std::process::Command::output (2 samples, 0.16%)</title><rect x="1.2719%" y="197" width="0.1590%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="2"/><text x="1.5219%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`std::sys::pal::unix::process::process_inner::_&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::spawn (1 samples, 0.08%)</title><rect x="1.3514%" y="181" width="0.0795%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="1"/><text x="1.6014%" y="191.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.08%)</title><rect x="1.3514%" y="165" width="0.0795%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="1"/><text x="1.6014%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.08%)</title><rect x="1.3514%" y="149" width="0.0795%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="1"/><text x="1.6014%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$free (9 samples, 0.72%)</title><rect x="1.4308%" y="277" width="0.7154%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="9"/><text x="1.6808%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$memcpy (2 samples, 0.16%)</title><rect x="2.1463%" y="277" width="0.1590%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="2"/><text x="2.3963%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$memmove (2 samples, 0.16%)</title><rect x="2.3052%" y="277" width="0.1590%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="2"/><text x="2.5552%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`__rdl_alloc (1 samples, 0.08%)</title><rect x="2.4642%" y="277" width="0.0795%" height="15" fill="rgb(241,131,45)" fg:x="31" fg:w="1"/><text x="2.7142%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`__rdl_dealloc (1 samples, 0.08%)</title><rect x="2.5437%" y="277" width="0.0795%" height="15" fill="rgb(249,31,29)" fg:x="32" fg:w="1"/><text x="2.7937%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="2.6232%" y="277" width="0.3180%" height="15" fill="rgb(225,111,53)" fg:x="33" fg:w="4"/><text x="2.8732%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="2.9412%" y="277" width="0.2385%" height="15" fill="rgb(238,160,17)" fg:x="37" fg:w="3"/><text x="3.1912%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 1.03%)</title><rect x="3.4181%" y="261" width="1.0334%" height="15" fill="rgb(214,148,48)" fg:x="43" fg:w="13"/><text x="3.6681%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`bytes::bytes::promotable_even_drop (19 samples, 1.51%)</title><rect x="3.1797%" y="277" width="1.5103%" height="15" fill="rgb(232,36,49)" fg:x="40" fg:w="19"/><text x="3.4297%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.24%)</title><rect x="4.4515%" y="261" width="0.2385%" height="15" fill="rgb(209,103,24)" fg:x="56" fg:w="3"/><text x="4.7015%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.24%)</title><rect x="4.4515%" y="245" width="0.2385%" height="15" fill="rgb(229,88,8)" fg:x="56" fg:w="3"/><text x="4.7015%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.24%)</title><rect x="4.4515%" y="229" width="0.2385%" height="15" fill="rgb(213,181,19)" fg:x="56" fg:w="3"/><text x="4.7015%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`bytes::bytes::shared_drop (24 samples, 1.91%)</title><rect x="4.6900%" y="277" width="1.9078%" height="15" fill="rgb(254,191,54)" fg:x="59" fg:w="24"/><text x="4.9400%" y="287.50">b..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (18 samples, 1.43%)</title><rect x="5.1669%" y="261" width="1.4308%" height="15" fill="rgb(241,83,37)" fg:x="65" fg:w="18"/><text x="5.4169%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;mors_traits::iter::SeqIter as mors_traits::iter::CacheIterator&gt;::next (4 samples, 0.32%)</title><rect x="6.5978%" y="181" width="0.3180%" height="15" fill="rgb(233,36,39)" fg:x="83" fg:w="4"/><text x="6.8478%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;mors_traits::iter::SeqIter as mors_traits::iter::KvCacheIter&lt;mors_common::kv::ValueMeta&gt;&gt;::value (3 samples, 0.24%)</title><rect x="6.9157%" y="181" width="0.2385%" height="15" fill="rgb(226,3,54)" fg:x="87" fg:w="3"/><text x="7.1657%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$free (3 samples, 0.24%)</title><rect x="8.5056%" y="149" width="0.2385%" height="15" fill="rgb(245,192,40)" fg:x="107" fg:w="3"/><text x="8.7556%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$memcpy (5 samples, 0.40%)</title><rect x="8.7440%" y="149" width="0.3975%" height="15" fill="rgb(238,167,29)" fg:x="110" fg:w="5"/><text x="8.9940%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`__rdl_alloc (1 samples, 0.08%)</title><rect x="9.1415%" y="149" width="0.0795%" height="15" fill="rgb(232,182,51)" fg:x="115" fg:w="1"/><text x="9.3915%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.08%)</title><rect x="9.2210%" y="85" width="0.0795%" height="15" fill="rgb(231,60,39)" fg:x="116" fg:w="1"/><text x="9.4710%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="9.2210%" y="69" width="0.0795%" height="15" fill="rgb(208,69,12)" fg:x="116" fg:w="1"/><text x="9.4710%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="9.2210%" y="53" width="0.0795%" height="15" fill="rgb(235,93,37)" fg:x="116" fg:w="1"/><text x="9.4710%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="9.2210%" y="37" width="0.0795%" height="15" fill="rgb(213,116,39)" fg:x="116" fg:w="1"/><text x="9.4710%" y="47.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.24%)</title><rect x="9.2210%" y="149" width="0.2385%" height="15" fill="rgb(222,207,29)" fg:x="116" fg:w="3"/><text x="9.4710%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="9.2210%" y="133" width="0.2385%" height="15" fill="rgb(206,96,30)" fg:x="116" fg:w="3"/><text x="9.4710%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.24%)</title><rect x="9.2210%" y="117" width="0.2385%" height="15" fill="rgb(218,138,4)" fg:x="116" fg:w="3"/><text x="9.4710%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.24%)</title><rect x="9.2210%" y="101" width="0.2385%" height="15" fill="rgb(250,191,14)" fg:x="116" fg:w="3"/><text x="9.4710%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.16%)</title><rect x="9.3005%" y="85" width="0.1590%" height="15" fill="rgb(239,60,40)" fg:x="117" fg:w="2"/><text x="9.5505%" y="95.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::kv::ValueMeta::encode (3 samples, 0.24%)</title><rect x="9.4595%" y="149" width="0.2385%" height="15" fill="rgb(206,27,48)" fg:x="119" fg:w="3"/><text x="9.7095%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`__rdl_alloc_zeroed (6 samples, 0.48%)</title><rect x="11.4467%" y="133" width="0.4769%" height="15" fill="rgb(225,35,8)" fg:x="144" fg:w="6"/><text x="11.6967%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="11.9237%" y="69" width="0.0795%" height="15" fill="rgb(250,213,24)" fg:x="150" fg:w="1"/><text x="12.1737%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.16%)</title><rect x="11.9237%" y="85" width="0.1590%" height="15" fill="rgb(247,123,22)" fg:x="150" fg:w="2"/><text x="12.1737%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="12.0032%" y="69" width="0.0795%" height="15" fill="rgb(231,138,38)" fg:x="151" fg:w="1"/><text x="12.2532%" y="79.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.24%)</title><rect x="11.9237%" y="133" width="0.2385%" height="15" fill="rgb(231,145,46)" fg:x="150" fg:w="3"/><text x="12.1737%" y="143.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="11.9237%" y="117" width="0.2385%" height="15" fill="rgb(251,118,11)" fg:x="150" fg:w="3"/><text x="12.1737%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.24%)</title><rect x="11.9237%" y="101" width="0.2385%" height="15" fill="rgb(217,147,25)" fg:x="150" fg:w="3"/><text x="12.1737%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.08%)</title><rect x="12.0827%" y="85" width="0.0795%" height="15" fill="rgb(247,81,37)" fg:x="152" fg:w="1"/><text x="12.3327%" y="95.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::kv::ValueMeta::encode (15 samples, 1.19%)</title><rect x="12.1622%" y="133" width="1.1924%" height="15" fill="rgb(209,12,38)" fg:x="153" fg:w="15"/><text x="12.4122%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (6 samples, 0.48%)</title><rect x="12.8776%" y="117" width="0.4769%" height="15" fill="rgb(227,1,9)" fg:x="162" fg:w="6"/><text x="13.1276%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.56%)</title><rect x="13.3545%" y="133" width="0.5564%" height="15" fill="rgb(248,47,43)" fg:x="168" fg:w="7"/><text x="13.6045%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.95%)</title><rect x="13.9110%" y="133" width="0.9539%" height="15" fill="rgb(221,10,30)" fg:x="175" fg:w="12"/><text x="14.1610%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.24%)</title><rect x="14.8649%" y="133" width="0.2385%" height="15" fill="rgb(210,229,1)" fg:x="187" fg:w="3"/><text x="15.1149%" y="143.50"></text></g><g><title>build-14da55837b9c1e2c`mors_sstable::block::write::BlockWriter::push_entry (78 samples, 6.20%)</title><rect x="9.6979%" y="149" width="6.2003%" height="15" fill="rgb(222,148,37)" fg:x="122" fg:w="78"/><text x="9.9479%" y="159.50">build-14..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.79%)</title><rect x="15.1033%" y="133" width="0.7949%" height="15" fill="rgb(234,67,33)" fg:x="190" fg:w="10"/><text x="15.3533%" y="143.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;alloc::vec::Vec&lt;u32&gt; as mors_common::util::Encode&gt;::encode (3 samples, 0.24%)</title><rect x="15.8983%" y="117" width="0.2385%" height="15" fill="rgb(247,98,35)" fg:x="200" fg:w="3"/><text x="16.1483%" y="127.50"></text></g><g><title>build-14da55837b9c1e2c`mors_sstable::block::write::BlockWriter::finish_block (22 samples, 1.75%)</title><rect x="15.8983%" y="133" width="1.7488%" height="15" fill="rgb(247,138,52)" fg:x="200" fg:w="22"/><text x="16.1483%" y="143.50"></text></g><g><title>build-14da55837b9c1e2c`crc32fast::Hasher::update (19 samples, 1.51%)</title><rect x="16.1367%" y="117" width="1.5103%" height="15" fill="rgb(213,79,30)" fg:x="203" fg:w="19"/><text x="16.3867%" y="127.50"></text></g><g><title>build-14da55837b9c1e2c`mors_sstable::block::write::BlockWriter::new (1 samples, 0.08%)</title><rect x="17.6471%" y="133" width="0.0795%" height="15" fill="rgb(246,177,23)" fg:x="222" fg:w="1"/><text x="17.8971%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="17.6471%" y="117" width="0.0795%" height="15" fill="rgb(230,62,27)" fg:x="222" fg:w="1"/><text x="17.8971%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.08%)</title><rect x="17.6471%" y="101" width="0.0795%" height="15" fill="rgb(216,154,8)" fg:x="222" fg:w="1"/><text x="17.8971%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (1 samples, 0.08%)</title><rect x="17.6471%" y="85" width="0.0795%" height="15" fill="rgb(244,35,45)" fg:x="222" fg:w="1"/><text x="17.8971%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.08%)</title><rect x="17.6471%" y="69" width="0.0795%" height="15" fill="rgb(251,115,12)" fg:x="222" fg:w="1"/><text x="17.8971%" y="79.50"></text></g><g><title>build-14da55837b9c1e2c`mors_sstable::write::TableWriter&lt;K&gt;::finish_block (28 samples, 2.23%)</title><rect x="15.8983%" y="149" width="2.2258%" height="15" fill="rgb(240,54,50)" fg:x="200" fg:w="28"/><text x="16.1483%" y="159.50">b..</text></g><g><title>build-14da55837b9c1e2c`rayon_core::sleep::Sleep::wake_any_threads (5 samples, 0.40%)</title><rect x="17.7266%" y="133" width="0.3975%" height="15" fill="rgb(233,84,52)" fg:x="223" fg:w="5"/><text x="17.9766%" y="143.50"></text></g><g><title>build-14da55837b9c1e2c`rayon_core::sleep::Sleep::wake_specific_thread (5 samples, 0.40%)</title><rect x="17.7266%" y="117" width="0.3975%" height="15" fill="rgb(207,117,47)" fg:x="223" fg:w="5"/><text x="17.9766%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (5 samples, 0.40%)</title><rect x="17.7266%" y="101" width="0.3975%" height="15" fill="rgb(249,43,39)" fg:x="223" fg:w="5"/><text x="17.9766%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (10 samples, 0.79%)</title><rect x="18.1240%" y="149" width="0.7949%" height="15" fill="rgb(209,38,44)" fg:x="228" fg:w="10"/><text x="18.3740%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.72%)</title><rect x="18.9189%" y="149" width="0.7154%" height="15" fill="rgb(236,212,23)" fg:x="238" fg:w="9"/><text x="19.1689%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (14 samples, 1.11%)</title><rect x="19.6343%" y="149" width="1.1129%" height="15" fill="rgb(242,79,21)" fg:x="247" fg:w="14"/><text x="19.8843%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.48%)</title><rect x="20.7472%" y="149" width="0.4769%" height="15" fill="rgb(211,96,35)" fg:x="261" fg:w="6"/><text x="20.9972%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;mors_sstable::write::TableWriter&lt;K&gt; as mors_traits::sstable::TableWriterTrait&gt;::push (178 samples, 14.15%)</title><rect x="7.7901%" y="165" width="14.1494%" height="15" fill="rgb(253,215,40)" fg:x="98" fg:w="178"/><text x="8.0401%" y="175.50">build-14da55837b9c1e2..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.72%)</title><rect x="21.2242%" y="149" width="0.7154%" height="15" fill="rgb(211,81,21)" fg:x="267" fg:w="9"/><text x="21.4742%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$malloc (2 samples, 0.16%)</title><rect x="23.2114%" y="149" width="0.1590%" height="15" fill="rgb(208,190,38)" fg:x="292" fg:w="2"/><text x="23.4614%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$memcpy (2 samples, 0.16%)</title><rect x="23.3704%" y="149" width="0.1590%" height="15" fill="rgb(235,213,38)" fg:x="294" fg:w="2"/><text x="23.6204%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`__rdl_alloc (6 samples, 0.48%)</title><rect x="23.5294%" y="149" width="0.4769%" height="15" fill="rgb(237,122,38)" fg:x="296" fg:w="6"/><text x="23.7794%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`bytes::bytes::shallow_clone_vec (19 samples, 1.51%)</title><rect x="24.0064%" y="149" width="1.5103%" height="15" fill="rgb(244,218,35)" fg:x="302" fg:w="19"/><text x="24.2564%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (14 samples, 1.11%)</title><rect x="24.4038%" y="133" width="1.1129%" height="15" fill="rgb(240,68,47)" fg:x="307" fg:w="14"/><text x="24.6538%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (14 samples, 1.11%)</title><rect x="24.4038%" y="117" width="1.1129%" height="15" fill="rgb(210,16,53)" fg:x="307" fg:w="14"/><text x="24.6538%" y="127.50"></text></g><g><title>build-14da55837b9c1e2c`bytes::bytes::shared_drop (10 samples, 0.79%)</title><rect x="25.5167%" y="149" width="0.7949%" height="15" fill="rgb(235,124,12)" fg:x="321" fg:w="10"/><text x="25.7667%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::ts::KeyTs::encode (21 samples, 1.67%)</title><rect x="26.3116%" y="149" width="1.6693%" height="15" fill="rgb(224,169,11)" fg:x="331" fg:w="21"/><text x="26.5616%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (19 samples, 1.51%)</title><rect x="26.4706%" y="133" width="1.5103%" height="15" fill="rgb(250,166,2)" fg:x="333" fg:w="19"/><text x="26.7206%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.64%)</title><rect x="27.3450%" y="117" width="0.6359%" height="15" fill="rgb(242,216,29)" fg:x="344" fg:w="8"/><text x="27.5950%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.16%)</title><rect x="27.9809%" y="149" width="0.1590%" height="15" fill="rgb(230,116,27)" fg:x="352" fg:w="2"/><text x="28.2309%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.87%)</title><rect x="28.1399%" y="149" width="0.8744%" height="15" fill="rgb(228,99,48)" fg:x="354" fg:w="11"/><text x="28.3899%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 1.03%)</title><rect x="29.0143%" y="149" width="1.0334%" height="15" fill="rgb(253,11,6)" fg:x="365" fg:w="13"/><text x="29.2643%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 1.91%)</title><rect x="30.0477%" y="149" width="1.9078%" height="15" fill="rgb(247,143,39)" fg:x="378" fg:w="24"/><text x="30.2977%" y="159.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.40%)</title><rect x="31.9555%" y="149" width="0.3975%" height="15" fill="rgb(236,97,10)" fg:x="402" fg:w="5"/><text x="32.2055%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;mors_traits::iter::SeqIter as mors_traits::iter::CacheIterator&gt;::next (135 samples, 10.73%)</title><rect x="21.9396%" y="165" width="10.7313%" height="15" fill="rgb(233,208,19)" fg:x="276" fg:w="135"/><text x="22.1896%" y="175.50">build-14da55837b..</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.32%)</title><rect x="32.3529%" y="149" width="0.3180%" height="15" fill="rgb(216,164,2)" fg:x="407" fg:w="4"/><text x="32.6029%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;mors_traits::iter::SeqIter as mors_traits::iter::KvCacheIter&lt;mors_common::kv::ValueMeta&gt;&gt;::value (1 samples, 0.08%)</title><rect x="32.6709%" y="165" width="0.0795%" height="15" fill="rgb(220,129,5)" fg:x="411" fg:w="1"/><text x="32.9209%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__openat (1 samples, 0.08%)</title><rect x="32.7504%" y="117" width="0.0795%" height="15" fill="rgb(242,17,10)" fg:x="412" fg:w="1"/><text x="33.0004%" y="127.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;tempfile::dir::TempDir as core::ops::drop::Drop&gt;::drop (13 samples, 1.03%)</title><rect x="32.7504%" y="165" width="1.0334%" height="15" fill="rgb(242,107,0)" fg:x="412" fg:w="13"/><text x="33.0004%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (13 samples, 1.03%)</title><rect x="32.7504%" y="149" width="1.0334%" height="15" fill="rgb(251,28,31)" fg:x="412" fg:w="13"/><text x="33.0004%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (13 samples, 1.03%)</title><rect x="32.7504%" y="133" width="1.0334%" height="15" fill="rgb(233,223,10)" fg:x="412" fg:w="13"/><text x="33.0004%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__unlinkat (12 samples, 0.95%)</title><rect x="32.8299%" y="117" width="0.9539%" height="15" fill="rgb(215,21,27)" fg:x="413" fg:w="12"/><text x="33.0799%" y="127.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$free (9 samples, 0.72%)</title><rect x="33.7838%" y="165" width="0.7154%" height="15" fill="rgb(232,23,21)" fg:x="425" fg:w="9"/><text x="34.0338%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`bytes::bytes::shallow_clone_vec (3 samples, 0.24%)</title><rect x="34.4992%" y="165" width="0.2385%" height="15" fill="rgb(244,5,23)" fg:x="434" fg:w="3"/><text x="34.7492%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`bytes::bytes::shared_clone (10 samples, 0.79%)</title><rect x="34.7377%" y="165" width="0.7949%" height="15" fill="rgb(226,81,46)" fg:x="437" fg:w="10"/><text x="34.9877%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`bytes::bytes::shared_drop (2 samples, 0.16%)</title><rect x="35.5326%" y="165" width="0.1590%" height="15" fill="rgb(247,70,30)" fg:x="447" fg:w="2"/><text x="35.7826%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::bloom::Bloom::hash (6 samples, 0.48%)</title><rect x="35.6916%" y="165" width="0.4769%" height="15" fill="rgb(212,68,19)" fg:x="449" fg:w="6"/><text x="35.9416%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::bloom::Bloom::new (12 samples, 0.95%)</title><rect x="36.1685%" y="165" width="0.9539%" height="15" fill="rgb(240,187,13)" fg:x="455" fg:w="12"/><text x="36.4185%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::ts::KeyTs::encode (1 samples, 0.08%)</title><rect x="37.1224%" y="165" width="0.0795%" height="15" fill="rgb(223,113,26)" fg:x="467" fg:w="1"/><text x="37.3724%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::ts::KeyTsBorrow::txn_ts (2 samples, 0.16%)</title><rect x="37.2019%" y="165" width="0.1590%" height="15" fill="rgb(206,192,2)" fg:x="468" fg:w="2"/><text x="37.4519%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`flatbuffers::builder::FlatBufferBuilder::with_capacity (3 samples, 0.24%)</title><rect x="37.3609%" y="149" width="0.2385%" height="15" fill="rgb(241,108,4)" fg:x="470" fg:w="3"/><text x="37.6109%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.24%)</title><rect x="37.3609%" y="133" width="0.2385%" height="15" fill="rgb(247,173,49)" fg:x="470" fg:w="3"/><text x="37.6109%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.24%)</title><rect x="37.3609%" y="117" width="0.2385%" height="15" fill="rgb(224,114,35)" fg:x="470" fg:w="3"/><text x="37.6109%" y="127.50"></text></g><g><title>build-14da55837b9c1e2c`mors_sstable::write::TableWriter&lt;K&gt;::build_index (6 samples, 0.48%)</title><rect x="37.3609%" y="165" width="0.4769%" height="15" fill="rgb(245,159,27)" fg:x="470" fg:w="6"/><text x="37.6109%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.24%)</title><rect x="37.5994%" y="149" width="0.2385%" height="15" fill="rgb(245,172,44)" fg:x="473" fg:w="3"/><text x="37.8494%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (19 samples, 1.51%)</title><rect x="37.8378%" y="165" width="1.5103%" height="15" fill="rgb(236,23,11)" fg:x="476" fg:w="19"/><text x="38.0878%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="39.3482%" y="165" width="0.0795%" height="15" fill="rgb(205,117,38)" fg:x="495" fg:w="1"/><text x="39.5982%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::park::CachedParkThread::block_on (414 samples, 32.91%)</title><rect x="6.5978%" y="197" width="32.9094%" height="15" fill="rgb(237,72,25)" fg:x="83" fg:w="414"/><text x="6.8478%" y="207.50">build-14da55837b9c1e2c`tokio::runtime::park::CachedPa..</text></g><g><title>build-14da55837b9c1e2c`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (407 samples, 32.35%)</title><rect x="7.1542%" y="181" width="32.3529%" height="15" fill="rgb(244,70,9)" fg:x="90" fg:w="407"/><text x="7.4042%" y="191.50">build-14da55837b9c1e2c`&lt;tracing::instrument::Instrum..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="39.4277%" y="165" width="0.0795%" height="15" fill="rgb(217,125,39)" fg:x="496" fg:w="1"/><text x="39.6777%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (415 samples, 32.99%)</title><rect x="6.5978%" y="261" width="32.9889%" height="15" fill="rgb(235,36,10)" fg:x="83" fg:w="415"/><text x="6.8478%" y="271.50">build-14da55837b9c1e2c`&lt;alloc::vec::Vec&lt;T&gt; as alloc::..</text></g><g><title>build-14da55837b9c1e2c`criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (415 samples, 32.99%)</title><rect x="6.5978%" y="245" width="32.9889%" height="15" fill="rgb(251,123,47)" fg:x="83" fg:w="415"/><text x="6.8478%" y="255.50">build-14da55837b9c1e2c`criterion::bencher::AsyncBench..</text></g><g><title>build-14da55837b9c1e2c`&lt;&amp;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (415 samples, 32.99%)</title><rect x="6.5978%" y="229" width="32.9889%" height="15" fill="rgb(221,13,13)" fg:x="83" fg:w="415"/><text x="6.8478%" y="239.50">build-14da55837b9c1e2c`&lt;&amp;tokio::runtime::runtime::Run..</text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::context::runtime::enter_runtime (415 samples, 32.99%)</title><rect x="6.5978%" y="213" width="32.9889%" height="15" fill="rgb(238,131,9)" fg:x="83" fg:w="415"/><text x="6.8478%" y="223.50">build-14da55837b9c1e2c`tokio::runtime::context::runti..</text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::park::drop_waker (1 samples, 0.08%)</title><rect x="39.5072%" y="197" width="0.0795%" height="15" fill="rgb(211,50,8)" fg:x="497" fg:w="1"/><text x="39.7572%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (416 samples, 33.07%)</title><rect x="6.5978%" y="277" width="33.0684%" height="15" fill="rgb(245,182,24)" fg:x="83" fg:w="416"/><text x="6.8478%" y="287.50">build-14da55837b9c1e2c`criterion::benchmark_group::Ben..</text></g><g><title>build-14da55837b9c1e2c`&lt;criterion::report::Reports as criterion::report::Report&gt;::test_start (1 samples, 0.08%)</title><rect x="39.5866%" y="261" width="0.0795%" height="15" fill="rgb(242,14,37)" fg:x="498" fg:w="1"/><text x="39.8366%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`std::io::stdio::_print (1 samples, 0.08%)</title><rect x="39.5866%" y="245" width="0.0795%" height="15" fill="rgb(246,228,12)" fg:x="498" fg:w="1"/><text x="39.8366%" y="255.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.08%)</title><rect x="39.5866%" y="229" width="0.0795%" height="15" fill="rgb(213,55,15)" fg:x="498" fg:w="1"/><text x="39.8366%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`core::fmt::write (1 samples, 0.08%)</title><rect x="39.5866%" y="213" width="0.0795%" height="15" fill="rgb(209,9,3)" fg:x="498" fg:w="1"/><text x="39.8366%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="39.5866%" y="197" width="0.0795%" height="15" fill="rgb(230,59,30)" fg:x="498" fg:w="1"/><text x="39.8366%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.08%)</title><rect x="39.5866%" y="181" width="0.0795%" height="15" fill="rgb(209,121,21)" fg:x="498" fg:w="1"/><text x="39.8366%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.08%)</title><rect x="39.5866%" y="165" width="0.0795%" height="15" fill="rgb(220,109,13)" fg:x="498" fg:w="1"/><text x="39.8366%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::kv::ValueMeta::set_value (2 samples, 0.16%)</title><rect x="39.6661%" y="277" width="0.1590%" height="15" fill="rgb(232,18,1)" fg:x="499" fg:w="2"/><text x="39.9161%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (16 samples, 1.27%)</title><rect x="40.8585%" y="261" width="1.2719%" height="15" fill="rgb(215,41,42)" fg:x="514" fg:w="16"/><text x="41.1085%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (13 samples, 1.03%)</title><rect x="41.0970%" y="245" width="1.0334%" height="15" fill="rgb(224,123,36)" fg:x="517" fg:w="13"/><text x="41.3470%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.56%)</title><rect x="41.5739%" y="229" width="0.5564%" height="15" fill="rgb(240,125,3)" fg:x="523" fg:w="7"/><text x="41.8239%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$malloc (2 samples, 0.16%)</title><rect x="42.1304%" y="261" width="0.1590%" height="15" fill="rgb(205,98,50)" fg:x="530" fg:w="2"/><text x="42.3804%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`__rdl_alloc (1 samples, 0.08%)</title><rect x="42.2893%" y="261" width="0.0795%" height="15" fill="rgb(205,185,37)" fg:x="532" fg:w="1"/><text x="42.5393%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.08%)</title><rect x="43.6407%" y="245" width="0.0795%" height="15" fill="rgb(238,207,15)" fg:x="549" fg:w="1"/><text x="43.8907%" y="255.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="44.9126%" y="229" width="0.3180%" height="15" fill="rgb(213,199,42)" fg:x="565" fg:w="4"/><text x="45.1626%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`core::fmt::Formatter::pad_integral (11 samples, 0.87%)</title><rect x="45.2305%" y="229" width="0.8744%" height="15" fill="rgb(235,201,11)" fg:x="569" fg:w="11"/><text x="45.4805%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`__rdl_alloc (1 samples, 0.08%)</title><rect x="48.0922%" y="181" width="0.0795%" height="15" fill="rgb(207,46,11)" fg:x="605" fg:w="1"/><text x="48.3422%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="48.1717%" y="181" width="0.3975%" height="15" fill="rgb(241,35,35)" fg:x="606" fg:w="5"/><text x="48.4217%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.32%)</title><rect x="48.2512%" y="165" width="0.3180%" height="15" fill="rgb(243,32,47)" fg:x="607" fg:w="4"/><text x="48.5012%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.72%)</title><rect x="48.5692%" y="181" width="0.7154%" height="15" fill="rgb(247,202,23)" fg:x="611" fg:w="9"/><text x="48.8192%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.16%)</title><rect x="49.2846%" y="181" width="0.1590%" height="15" fill="rgb(219,102,11)" fg:x="620" fg:w="2"/><text x="49.5346%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (42 samples, 3.34%)</title><rect x="47.7742%" y="197" width="3.3386%" height="15" fill="rgb(243,110,44)" fg:x="601" fg:w="42"/><text x="48.0242%" y="207.50">bui..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 1.67%)</title><rect x="49.4436%" y="181" width="1.6693%" height="15" fill="rgb(222,74,54)" fg:x="622" fg:w="21"/><text x="49.6936%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (47 samples, 3.74%)</title><rect x="47.5358%" y="213" width="3.7361%" height="15" fill="rgb(216,99,12)" fg:x="598" fg:w="47"/><text x="47.7858%" y="223.50">buil..</text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.1129%" y="197" width="0.1590%" height="15" fill="rgb(226,22,26)" fg:x="643" fg:w="2"/><text x="51.3629%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$memcpy (3 samples, 0.24%)</title><rect x="51.2719%" y="213" width="0.2385%" height="15" fill="rgb(217,163,10)" fg:x="645" fg:w="3"/><text x="51.5219%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="51.5103%" y="213" width="0.1590%" height="15" fill="rgb(213,25,53)" fg:x="648" fg:w="2"/><text x="51.7603%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`core::fmt::Formatter::pad_integral (6 samples, 0.48%)</title><rect x="51.6693%" y="213" width="0.4769%" height="15" fill="rgb(252,105,26)" fg:x="650" fg:w="6"/><text x="51.9193%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`core::fmt::Formatter::pad_integral::write_prefix (5 samples, 0.40%)</title><rect x="52.1463%" y="213" width="0.3975%" height="15" fill="rgb(220,39,43)" fg:x="656" fg:w="5"/><text x="52.3963%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`DYLD-STUB$$malloc (1 samples, 0.08%)</title><rect x="52.5437%" y="149" width="0.0795%" height="15" fill="rgb(229,68,48)" fg:x="661" fg:w="1"/><text x="52.7937%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.6232%" y="149" width="0.0795%" height="15" fill="rgb(252,8,32)" fg:x="662" fg:w="1"/><text x="52.8732%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="52.7027%" y="149" width="0.0795%" height="15" fill="rgb(223,20,43)" fg:x="663" fg:w="1"/><text x="52.9527%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.48%)</title><rect x="52.5437%" y="165" width="0.4769%" height="15" fill="rgb(229,81,49)" fg:x="661" fg:w="6"/><text x="52.7937%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.24%)</title><rect x="52.7822%" y="149" width="0.2385%" height="15" fill="rgb(236,28,36)" fg:x="664" fg:w="3"/><text x="53.0322%" y="159.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (7 samples, 0.56%)</title><rect x="52.5437%" y="197" width="0.5564%" height="15" fill="rgb(249,185,26)" fg:x="661" fg:w="7"/><text x="52.7937%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::string::String::push (7 samples, 0.56%)</title><rect x="52.5437%" y="181" width="0.5564%" height="15" fill="rgb(249,174,33)" fg:x="661" fg:w="7"/><text x="52.7937%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.0207%" y="165" width="0.0795%" height="15" fill="rgb(233,201,37)" fg:x="667" fg:w="1"/><text x="53.2707%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::string::String::push (1 samples, 0.08%)</title><rect x="53.1002%" y="197" width="0.0795%" height="15" fill="rgb(221,78,26)" fg:x="668" fg:w="1"/><text x="53.3502%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`core::fmt::Formatter::pad_integral (9 samples, 0.72%)</title><rect x="52.5437%" y="213" width="0.7154%" height="15" fill="rgb(250,127,30)" fg:x="661" fg:w="9"/><text x="52.7937%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="53.1797%" y="197" width="0.0795%" height="15" fill="rgb(230,49,44)" fg:x="669" fg:w="1"/><text x="53.4297%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::fmt::format::format_inner (147 samples, 11.69%)</title><rect x="42.3688%" y="261" width="11.6852%" height="15" fill="rgb(229,67,23)" fg:x="533" fg:w="147"/><text x="42.6188%" y="271.50">build-14da55837b9..</text></g><g><title>build-14da55837b9c1e2c`core::fmt::write (130 samples, 10.33%)</title><rect x="43.7202%" y="245" width="10.3339%" height="15" fill="rgb(249,83,47)" fg:x="550" fg:w="130"/><text x="43.9702%" y="255.50">build-14da55837..</text></g><g><title>build-14da55837b9c1e2c`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (100 samples, 7.95%)</title><rect x="46.1049%" y="229" width="7.9491%" height="15" fill="rgb(215,43,3)" fg:x="580" fg:w="100"/><text x="46.3549%" y="239.50">build-14da5..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.79%)</title><rect x="53.2591%" y="213" width="0.7949%" height="15" fill="rgb(238,154,13)" fg:x="670" fg:w="10"/><text x="53.5091%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`__rdl_realloc (3 samples, 0.24%)</title><rect x="54.2130%" y="245" width="0.2385%" height="15" fill="rgb(219,56,2)" fg:x="682" fg:w="3"/><text x="54.4630%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.16%)</title><rect x="54.6105%" y="229" width="0.1590%" height="15" fill="rgb(233,0,4)" fg:x="687" fg:w="2"/><text x="54.8605%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.32%)</title><rect x="55.7234%" y="197" width="0.3180%" height="15" fill="rgb(235,30,7)" fg:x="701" fg:w="4"/><text x="55.9734%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (12 samples, 0.95%)</title><rect x="55.3259%" y="213" width="0.9539%" height="15" fill="rgb(250,79,13)" fg:x="696" fg:w="12"/><text x="55.5759%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.24%)</title><rect x="56.0413%" y="197" width="0.2385%" height="15" fill="rgb(211,146,34)" fg:x="705" fg:w="3"/><text x="56.2913%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (21 samples, 1.67%)</title><rect x="54.7695%" y="229" width="1.6693%" height="15" fill="rgb(228,22,38)" fg:x="689" fg:w="21"/><text x="55.0195%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.16%)</title><rect x="56.2798%" y="213" width="0.1590%" height="15" fill="rgb(235,168,5)" fg:x="708" fg:w="2"/><text x="56.5298%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::finish_grow (28 samples, 2.23%)</title><rect x="54.4515%" y="245" width="2.2258%" height="15" fill="rgb(221,155,16)" fg:x="685" fg:w="28"/><text x="54.7015%" y="255.50">b..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.24%)</title><rect x="56.4388%" y="229" width="0.2385%" height="15" fill="rgb(215,215,53)" fg:x="710" fg:w="3"/><text x="56.6888%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (38 samples, 3.02%)</title><rect x="54.0541%" y="261" width="3.0207%" height="15" fill="rgb(223,4,10)" fg:x="680" fg:w="38"/><text x="54.3041%" y="271.50">bui..</text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.40%)</title><rect x="56.6773%" y="245" width="0.3975%" height="15" fill="rgb(234,103,6)" fg:x="713" fg:w="5"/><text x="56.9273%" y="255.50"></text></g><g><title>build-14da55837b9c1e2c`alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.0747%" y="261" width="0.2385%" height="15" fill="rgb(227,97,0)" fg:x="718" fg:w="3"/><text x="57.3247%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`core::fmt::write (3 samples, 0.24%)</title><rect x="57.3132%" y="261" width="0.2385%" height="15" fill="rgb(234,150,53)" fg:x="721" fg:w="3"/><text x="57.5632%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`mors_common::kv::ValueMeta::set_value (3 samples, 0.24%)</title><rect x="57.5517%" y="261" width="0.2385%" height="15" fill="rgb(228,201,54)" fg:x="724" fg:w="3"/><text x="57.8017%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.48%)</title><rect x="57.7901%" y="261" width="0.4769%" height="15" fill="rgb(222,22,37)" fg:x="727" fg:w="6"/><text x="58.0401%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 1.03%)</title><rect x="58.2671%" y="261" width="1.0334%" height="15" fill="rgb(237,53,32)" fg:x="733" fg:w="13"/><text x="58.5171%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.08%)</title><rect x="59.3005%" y="261" width="0.0795%" height="15" fill="rgb(233,25,53)" fg:x="746" fg:w="1"/><text x="59.5505%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`mors_traits::iter::generate_kv (254 samples, 20.19%)</title><rect x="39.8251%" y="277" width="20.1908%" height="15" fill="rgb(210,40,34)" fg:x="501" fg:w="254"/><text x="40.0751%" y="287.50">build-14da55837b9c1e2c`mors_trai..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.64%)</title><rect x="59.3800%" y="261" width="0.6359%" height="15" fill="rgb(241,220,44)" fg:x="747" fg:w="8"/><text x="59.6300%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::runtime::Runtime::new (1 samples, 0.08%)</title><rect x="60.0159%" y="277" width="0.0795%" height="15" fill="rgb(235,28,35)" fg:x="755" fg:w="1"/><text x="60.2659%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::builder::Builder::build (1 samples, 0.08%)</title><rect x="60.0159%" y="261" width="0.0795%" height="15" fill="rgb(210,56,17)" fg:x="755" fg:w="1"/><text x="60.2659%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.08%)</title><rect x="60.0159%" y="245" width="0.0795%" height="15" fill="rgb(224,130,29)" fg:x="755" fg:w="1"/><text x="60.2659%" y="255.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.08%)</title><rect x="60.0159%" y="229" width="0.0795%" height="15" fill="rgb(235,212,8)" fg:x="755" fg:w="1"/><text x="60.2659%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.08%)</title><rect x="60.0159%" y="213" width="0.0795%" height="15" fill="rgb(223,33,50)" fg:x="755" fg:w="1"/><text x="60.2659%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`std::thread::Builder::spawn_unchecked (1 samples, 0.08%)</title><rect x="60.0159%" y="197" width="0.0795%" height="15" fill="rgb(219,149,13)" fg:x="755" fg:w="1"/><text x="60.2659%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`std::sys::pal::unix::thread::Thread::new (1 samples, 0.08%)</title><rect x="60.0159%" y="181" width="0.0795%" height="15" fill="rgb(250,156,29)" fg:x="755" fg:w="1"/><text x="60.2659%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (1 samples, 0.08%)</title><rect x="60.0159%" y="165" width="0.0795%" height="15" fill="rgb(216,193,19)" fg:x="755" fg:w="1"/><text x="60.2659%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.32%)</title><rect x="60.0954%" y="277" width="0.3180%" height="15" fill="rgb(216,135,14)" fg:x="756" fg:w="4"/><text x="60.3454%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (18 samples, 1.43%)</title><rect x="60.4134%" y="277" width="1.4308%" height="15" fill="rgb(241,47,5)" fg:x="760" fg:w="18"/><text x="60.6634%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.64%)</title><rect x="61.8442%" y="277" width="0.6359%" height="15" fill="rgb(233,42,35)" fg:x="778" fg:w="8"/><text x="62.0942%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (67 samples, 5.33%)</title><rect x="62.4801%" y="277" width="5.3259%" height="15" fill="rgb(231,13,6)" fg:x="786" fg:w="67"/><text x="62.7301%" y="287.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.32%)</title><rect x="67.8060%" y="277" width="0.3180%" height="15" fill="rgb(207,181,40)" fg:x="853" fg:w="4"/><text x="68.0560%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.32%)</title><rect x="67.8060%" y="261" width="0.3180%" height="15" fill="rgb(254,173,49)" fg:x="853" fg:w="4"/><text x="68.0560%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="68.1240%" y="277" width="0.0795%" height="15" fill="rgb(221,1,38)" fg:x="857" fg:w="1"/><text x="68.3740%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6 samples, 0.48%)</title><rect x="68.2035%" y="277" width="0.4769%" height="15" fill="rgb(206,124,46)" fg:x="858" fg:w="6"/><text x="68.4535%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (6 samples, 0.48%)</title><rect x="68.2035%" y="261" width="0.4769%" height="15" fill="rgb(249,21,11)" fg:x="858" fg:w="6"/><text x="68.4535%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.48%)</title><rect x="68.2035%" y="245" width="0.4769%" height="15" fill="rgb(222,201,40)" fg:x="858" fg:w="6"/><text x="68.4535%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.64%)</title><rect x="68.6804%" y="277" width="0.6359%" height="15" fill="rgb(235,61,29)" fg:x="864" fg:w="8"/><text x="68.9304%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.08%)</title><rect x="69.3164%" y="277" width="0.0795%" height="15" fill="rgb(219,207,3)" fg:x="872" fg:w="1"/><text x="69.5664%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 2.31%)</title><rect x="69.3959%" y="277" width="2.3052%" height="15" fill="rgb(222,56,46)" fg:x="873" fg:w="29"/><text x="69.6459%" y="287.50">l..</text></g><g><title>build-14da55837b9c1e2c`build::main (901 samples, 71.62%)</title><rect x="0.3975%" y="293" width="71.6216%" height="15" fill="rgb(239,76,54)" fg:x="5" fg:w="901"/><text x="0.6475%" y="303.50">build-14da55837b9c1e2c`build::main</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.32%)</title><rect x="71.7011%" y="277" width="0.3180%" height="15" fill="rgb(231,124,27)" fg:x="902" fg:w="4"/><text x="71.9511%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (20 samples, 1.59%)</title><rect x="72.0191%" y="293" width="1.5898%" height="15" fill="rgb(249,195,6)" fg:x="906" fg:w="20"/><text x="72.2691%" y="303.50"></text></g><g><title>build-14da55837b9c1e2c`main (930 samples, 73.93%)</title><rect x="0.0000%" y="357" width="73.9269%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="930"/><text x="0.2500%" y="367.50">build-14da55837b9c1e2c`main</text></g><g><title>build-14da55837b9c1e2c`std::rt::lang_start_internal (930 samples, 73.93%)</title><rect x="0.0000%" y="341" width="73.9269%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="930"/><text x="0.2500%" y="351.50">build-14da55837b9c1e2c`std::rt::lang_start_internal</text></g><g><title>build-14da55837b9c1e2c`std::rt::lang_start::_{{closure}} (930 samples, 73.93%)</title><rect x="0.0000%" y="325" width="73.9269%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="930"/><text x="0.2500%" y="335.50">build-14da55837b9c1e2c`std::rt::lang_start::_{{closure}}</text></g><g><title>build-14da55837b9c1e2c`std::sys_common::backtrace::__rust_begin_short_backtrace (930 samples, 73.93%)</title><rect x="0.0000%" y="309" width="73.9269%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="930"/><text x="0.2500%" y="319.50">build-14da55837b9c1e2c`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.32%)</title><rect x="73.6089%" y="293" width="0.3180%" height="15" fill="rgb(215,211,37)" fg:x="926" fg:w="4"/><text x="73.8589%" y="303.50"></text></g><g><title>dyld`start (931 samples, 74.01%)</title><rect x="0.0000%" y="373" width="74.0064%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="931"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.08%)</title><rect x="73.9269%" y="357" width="0.0795%" height="15" fill="rgb(227,165,31)" fg:x="930" fg:w="1"/><text x="74.1769%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.08%)</title><rect x="73.9269%" y="341" width="0.0795%" height="15" fill="rgb(228,167,24)" fg:x="930" fg:w="1"/><text x="74.1769%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.24%)</title><rect x="74.0064%" y="373" width="0.2385%" height="15" fill="rgb(228,143,12)" fg:x="931" fg:w="3"/><text x="74.2564%" y="383.50"></text></g><g><title>build-14da55837b9c1e2c`rayon_core::registry::WorkerThread::find_work (1 samples, 0.08%)</title><rect x="74.2448%" y="277" width="0.0795%" height="15" fill="rgb(249,149,8)" fg:x="934" fg:w="1"/><text x="74.4948%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.08%)</title><rect x="74.3243%" y="261" width="0.0795%" height="15" fill="rgb(243,35,44)" fg:x="935" fg:w="1"/><text x="74.5743%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`crossbeam_epoch::default::with_handle (4 samples, 0.32%)</title><rect x="75.9141%" y="213" width="0.3180%" height="15" fill="rgb(246,89,9)" fg:x="955" fg:w="4"/><text x="76.1641%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (14 samples, 1.11%)</title><rect x="75.1987%" y="229" width="1.1129%" height="15" fill="rgb(233,213,13)" fg:x="946" fg:w="14"/><text x="75.4487%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.08%)</title><rect x="76.2321%" y="213" width="0.0795%" height="15" fill="rgb(233,141,41)" fg:x="959" fg:w="1"/><text x="76.4821%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 2.15%)</title><rect x="74.4038%" y="245" width="2.1463%" height="15" fill="rgb(239,167,4)" fg:x="936" fg:w="27"/><text x="74.6538%" y="255.50">b..</text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.24%)</title><rect x="76.3116%" y="229" width="0.2385%" height="15" fill="rgb(209,217,16)" fg:x="960" fg:w="3"/><text x="76.5616%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`crossbeam_deque::deque::Injector&lt;T&gt;::steal (1 samples, 0.08%)</title><rect x="76.5501%" y="245" width="0.0795%" height="15" fill="rgb(219,88,35)" fg:x="963" fg:w="1"/><text x="76.8001%" y="255.50"></text></g><g><title>build-14da55837b9c1e2c`rayon_core::registry::WorkerThread::find_work (29 samples, 2.31%)</title><rect x="74.4038%" y="261" width="2.3052%" height="15" fill="rgb(220,193,23)" fg:x="936" fg:w="29"/><text x="74.6538%" y="271.50">b..</text></g><g><title>build-14da55837b9c1e2c`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.08%)</title><rect x="76.6296%" y="245" width="0.0795%" height="15" fill="rgb(230,90,52)" fg:x="964" fg:w="1"/><text x="76.8796%" y="255.50"></text></g><g><title>build-14da55837b9c1e2c`crossbeam_epoch::default::with_handle (1 samples, 0.08%)</title><rect x="76.6296%" y="229" width="0.0795%" height="15" fill="rgb(252,106,19)" fg:x="964" fg:w="1"/><text x="76.8796%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`rayon_core::sleep::Sleep::sleep (29 samples, 2.31%)</title><rect x="76.7091%" y="261" width="2.3052%" height="15" fill="rgb(206,74,20)" fg:x="965" fg:w="29"/><text x="76.9591%" y="271.50">b..</text></g><g><title>build-14da55837b9c1e2c`std::sync::condvar::Condvar::wait (29 samples, 2.31%)</title><rect x="76.7091%" y="245" width="2.3052%" height="15" fill="rgb(230,138,44)" fg:x="965" fg:w="29"/><text x="76.9591%" y="255.50">b..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (27 samples, 2.15%)</title><rect x="76.8680%" y="229" width="2.1463%" height="15" fill="rgb(235,182,43)" fg:x="967" fg:w="27"/><text x="77.1180%" y="239.50">l..</text></g><g><title>build-14da55837b9c1e2c`rayon_core::sleep::Sleep::wake_any_threads (7 samples, 0.56%)</title><rect x="79.0143%" y="261" width="0.5564%" height="15" fill="rgb(242,16,51)" fg:x="994" fg:w="7"/><text x="79.2643%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`rayon_core::sleep::Sleep::wake_specific_thread (7 samples, 0.56%)</title><rect x="79.0143%" y="245" width="0.5564%" height="15" fill="rgb(248,9,4)" fg:x="994" fg:w="7"/><text x="79.2643%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (7 samples, 0.56%)</title><rect x="79.0143%" y="229" width="0.5564%" height="15" fill="rgb(210,31,22)" fg:x="994" fg:w="7"/><text x="79.2643%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (104 samples, 8.27%)</title><rect x="79.5707%" y="261" width="8.2671%" height="15" fill="rgb(239,54,39)" fg:x="1001" fg:w="104"/><text x="79.8207%" y="271.50">libsystem_ke..</text></g><g><title>build-14da55837b9c1e2c`rayon_core::registry::ThreadBuilder::run (172 samples, 13.67%)</title><rect x="74.2448%" y="293" width="13.6725%" height="15" fill="rgb(230,99,41)" fg:x="934" fg:w="172"/><text x="74.4948%" y="303.50">build-14da55837b9c1e2..</text></g><g><title>build-14da55837b9c1e2c`rayon_core::registry::WorkerThread::wait_until_cold (171 samples, 13.59%)</title><rect x="74.3243%" y="277" width="13.5930%" height="15" fill="rgb(253,106,12)" fg:x="935" fg:w="171"/><text x="74.5743%" y="287.50">build-14da55837b9c1e2..</text></g><g><title>libsystem_pthread.dylib`cthread_yield (1 samples, 0.08%)</title><rect x="87.8378%" y="261" width="0.0795%" height="15" fill="rgb(213,46,41)" fg:x="1105" fg:w="1"/><text x="88.0878%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.08%)</title><rect x="87.9173%" y="277" width="0.0795%" height="15" fill="rgb(215,133,35)" fg:x="1106" fg:w="1"/><text x="88.1673%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.08%)</title><rect x="87.9173%" y="261" width="0.0795%" height="15" fill="rgb(213,28,5)" fg:x="1106" fg:w="1"/><text x="88.1673%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.08%)</title><rect x="87.9968%" y="277" width="0.0795%" height="15" fill="rgb(215,77,49)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="287.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.08%)</title><rect x="87.9968%" y="261" width="0.0795%" height="15" fill="rgb(248,100,22)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="271.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="87.9968%" y="245" width="0.0795%" height="15" fill="rgb(208,67,9)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="255.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 0.08%)</title><rect x="87.9968%" y="229" width="0.0795%" height="15" fill="rgb(219,133,21)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="239.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::context::runtime::enter_runtime (1 samples, 0.08%)</title><rect x="87.9968%" y="213" width="0.0795%" height="15" fill="rgb(246,46,29)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="223.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::context::set_scheduler (1 samples, 0.08%)</title><rect x="87.9968%" y="197" width="0.0795%" height="15" fill="rgb(246,185,52)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="207.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::scheduler::multi_thread::worker::Context::run (1 samples, 0.08%)</title><rect x="87.9968%" y="181" width="0.0795%" height="15" fill="rgb(252,136,11)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.08%)</title><rect x="87.9968%" y="165" width="0.0795%" height="15" fill="rgb(219,138,53)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="175.50"></text></g><g><title>build-14da55837b9c1e2c`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.08%)</title><rect x="87.9968%" y="149" width="0.0795%" height="15" fill="rgb(211,51,23)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.08%)</title><rect x="87.9968%" y="133" width="0.0795%" height="15" fill="rgb(247,221,28)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="143.50"></text></g><g><title>build-14da55837b9c1e2c`&lt;mors_wal::storage::mmap::MmapFile as mors_traits::file::StorageTrait&gt;::append (120 samples, 9.54%)</title><rect x="88.0763%" y="213" width="9.5390%" height="15" fill="rgb(251,222,45)" fg:x="1108" fg:w="120"/><text x="88.3263%" y="223.50">build-14da5583..</text></g><g><title>libsystem_kernel.dylib`__msync (120 samples, 9.54%)</title><rect x="88.0763%" y="197" width="9.5390%" height="15" fill="rgb(217,162,53)" fg:x="1108" fg:w="120"/><text x="88.3263%" y="207.50">libsystem_kern..</text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.08%)</title><rect x="97.6153%" y="197" width="0.0795%" height="15" fill="rgb(229,93,14)" fg:x="1228" fg:w="1"/><text x="97.8653%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (1 samples, 0.08%)</title><rect x="97.6153%" y="181" width="0.0795%" height="15" fill="rgb(209,67,49)" fg:x="1228" fg:w="1"/><text x="97.8653%" y="191.50"></text></g><g><title>build-14da55837b9c1e2c`core::ptr::drop_in_place&lt;mors_sstable::write::TableBuildData&gt; (4 samples, 0.32%)</title><rect x="97.6153%" y="213" width="0.3180%" height="15" fill="rgb(213,87,29)" fg:x="1228" fg:w="4"/><text x="97.8653%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.24%)</title><rect x="97.6948%" y="197" width="0.2385%" height="15" fill="rgb(205,151,52)" fg:x="1229" fg:w="3"/><text x="97.9448%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.08%)</title><rect x="97.8537%" y="181" width="0.0795%" height="15" fill="rgb(253,215,39)" fg:x="1231" fg:w="1"/><text x="98.1037%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.08%)</title><rect x="97.9332%" y="213" width="0.0795%" height="15" fill="rgb(221,220,41)" fg:x="1232" fg:w="1"/><text x="98.1832%" y="223.50"></text></g><g><title>all (1,258 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (324 samples, 25.76%)</title><rect x="74.2448%" y="373" width="25.7552%" height="15" fill="rgb(221,193,43)" fg:x="934" fg:w="324"/><text x="74.4948%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (324 samples, 25.76%)</title><rect x="74.2448%" y="357" width="25.7552%" height="15" fill="rgb(240,128,52)" fg:x="934" fg:w="324"/><text x="74.4948%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>build-14da55837b9c1e2c`std::sys::pal::unix::thread::Thread::new::thread_start (324 samples, 25.76%)</title><rect x="74.2448%" y="341" width="25.7552%" height="15" fill="rgb(253,114,12)" fg:x="934" fg:w="324"/><text x="74.4948%" y="351.50">build-14da55837b9c1e2c`std::sys::pal::uni..</text></g><g><title>build-14da55837b9c1e2c`core::ops::function::FnOnce::call_once{{vtable.shim}} (324 samples, 25.76%)</title><rect x="74.2448%" y="325" width="25.7552%" height="15" fill="rgb(215,223,47)" fg:x="934" fg:w="324"/><text x="74.4948%" y="335.50">build-14da55837b9c1e2c`core::ops::functio..</text></g><g><title>build-14da55837b9c1e2c`std::sys_common::backtrace::__rust_begin_short_backtrace (324 samples, 25.76%)</title><rect x="74.2448%" y="309" width="25.7552%" height="15" fill="rgb(248,225,23)" fg:x="934" fg:w="324"/><text x="74.4948%" y="319.50">build-14da55837b9c1e2c`std::sys_common::b..</text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::blocking::pool::Inner::run (152 samples, 12.08%)</title><rect x="87.9173%" y="293" width="12.0827%" height="15" fill="rgb(250,108,0)" fg:x="1106" fg:w="152"/><text x="88.1673%" y="303.50">build-14da55837b9c..</text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::task::raw::poll (150 samples, 11.92%)</title><rect x="88.0763%" y="277" width="11.9237%" height="15" fill="rgb(228,208,7)" fg:x="1108" fg:w="150"/><text x="88.3263%" y="287.50">build-14da55837b9c..</text></g><g><title>build-14da55837b9c1e2c`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (150 samples, 11.92%)</title><rect x="88.0763%" y="261" width="11.9237%" height="15" fill="rgb(244,45,10)" fg:x="1108" fg:w="150"/><text x="88.3263%" y="271.50">build-14da55837b9c..</text></g><g><title>build-14da55837b9c1e2c`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (150 samples, 11.92%)</title><rect x="88.0763%" y="245" width="11.9237%" height="15" fill="rgb(207,125,25)" fg:x="1108" fg:w="150"/><text x="88.3263%" y="255.50">build-14da55837b9c..</text></g><g><title>build-14da55837b9c1e2c`&lt;mors_sstable::write::TableWriter&lt;K&gt; as mors_traits::sstable::TableWriterTrait&gt;::flush_to_disk::_{{closure}}::write_data (150 samples, 11.92%)</title><rect x="88.0763%" y="229" width="11.9237%" height="15" fill="rgb(210,195,18)" fg:x="1108" fg:w="150"/><text x="88.3263%" y="239.50">build-14da55837b9c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 1.99%)</title><rect x="98.0127%" y="213" width="1.9873%" height="15" fill="rgb(249,80,12)" fg:x="1233" fg:w="25"/><text x="98.2627%" y="223.50">l..</text></g></svg></svg>